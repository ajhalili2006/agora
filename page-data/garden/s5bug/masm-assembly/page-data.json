{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/garden/s5bug/masm-assembly","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"masm-assembly\"\n  }, \"MASM Assembly\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The dialect of assembly used by Microsoft's assembler.\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"2020-10-31\"\n  }, \"2020-10-31\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set up this journal. See the [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5CREADME\",\n    \"title\": \"Aly's digital garden\"\n  }), \"readme\"), \"].\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Looked into writing a [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cghidra\",\n    \"title\": \"Ghidra\"\n  }), \"Ghidra\"), \"] plugin to generate [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cmasm-assembly\",\n    \"title\": \"MASM Assembly\"\n  }), \"MASM Assembly\"), \"] for a\\n[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cdecompilation\",\n    \"title\": \"Decompilation\"\n  }), \"decompilation\"), \"] project. It seems the process is complicated, by the \\\"Hello\\nWorld\\\" example given.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Explored whether or not it's possible to write recursive algorithms in\\nconstant space using [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cfs2\",\n    \"title\": \"fs2\"\n  }), \"fs2\"), \"], and how it applies to [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Csledge\",\n    \"title\": \"sledge\"\n  }), \"sledge\"), \"].\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It was discussed in the Scala Discord whether or not there exists an\\nalgorithm to generate moves for the Dragon Fractal in constant space. The\\ncurrent theory is that there can't be an algorithm that uses less than\\nlinear space.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Talked with my family about my plans for university. I've decided that if I'm\\nunable to complete an Associate's Degree by the end of Summer 2021, then I'll\\nreduce my workload and enter university in Fall 2022 instead of Fall 2021.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussed how safe and unsafe [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Czig\",\n    \"title\": \"Zig\"\n  }), \"Zig\"), \"] is with [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cminuskelvin\",\n    \"title\": \"MinusKelvin\"\n  }), \"MinusKelvin\"), \"]. The conclusion\\nwas that [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Czig\",\n    \"title\": \"Zig\"\n  }), \"Zig\"), \"]'s level of safety is perfect for a replacement for C, but\\n[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Crust\",\n    \"title\": \"Rust\"\n  }), \"Rust\"), \"] gives better overall safety.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Explored the practicality of a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Real\"), \"/Computable number type for use in place\\nof [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Czig\",\n    \"title\": \"Zig\"\n  }), \"Zig\"), \"]'s \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"comptime_float\"), \". The consensus was that, if accurate, it would\\nbe very useful for expanding [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Czig\",\n    \"title\": \"Zig\"\n  }), \"Zig\"), \"]'s floating point datatypes outside of\\njust \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f16\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f32\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f64\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f128\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discovered [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cminecraft-but-its-everywhere-at-the-end-of-time\",\n    \"title\": \"Minecraft, but it's Everywhere At The End Of Time\"\n  }), \"Minecraft, but it's Everywhere At The End Of Time\"), \"]. I've\\nfigured out that this is some sort of reference to \\\"[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cthe-caretaker\",\n    \"title\": \"The Caretaker\"\n  }), \"The Caretaker\"), \"],\\\" but I\\ndon't know what \\\"[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"..%5Cthe-caretaker\",\n    \"title\": \"The Caretaker\"\n  }), \"The Caretaker\"), \"]\\\" is. I'll have to do more research on it\\ntomorrow.\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"9904cd87-4b56-516e-8a34-1a3aeeb0ff77","fields":{"slug":"/garden/s5bug/journal/2020-10-31","title":"2020-10-31"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"todo\"\n  }, \"Todo\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Add this garden to the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://flancia.org/go/agora\"\n  }), \"Agora\")), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Write a [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"ghidra\",\n    \"title\": \"Ghidra\"\n  }), \"Ghidra\"), \"] plugin to output procedures as individual\\n[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"masm-assembly\",\n    \"title\": \"MASM Assembly\"\n  }), \"MASM Assembly\"), \"] files\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Finish my contribution of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"En_Tg\"), \" to the [\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"the-legend-of-zelda-ocarina-of-time\",\n    \"title\": \"The Legend of Zelda: Ocarina of Time\"\n  }), \"Ocarina of Time\"), \"]\\n[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"decompilation\",\n    \"title\": \"Decompilation\"\n  }), \"decompilation\"), \"] project\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Draft up a pull request that fixes invalid fields present in\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"twitter4s\"), \".\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Finish my addition of a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HashMap\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cats-collections\"), \".\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Document how I accomplished the Lecture Transcriber written on\\n[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"journal%5C2020-11-02\",\n    \"title\": \"2020-11-02\"\n  }), \"2020-11-02\"), \"].\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"3ee530fd-9a8e-548e-90a5-fb9d4caf6fa2","fields":{"slug":"/garden/s5bug/todo","title":"Todo"}}}]},"fields":{"slug":"/garden/s5bug/masm-assembly","title":"MASM Assembly"}}},"pageContext":{"id":"3ddfd0ac-32fb-5c65-87e8-be60bcd049aa"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}